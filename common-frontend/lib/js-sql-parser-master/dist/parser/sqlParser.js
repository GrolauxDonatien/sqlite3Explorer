/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,4],$V2=[2,4],$V3=[1,13],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[2,24],$V8=[1,16],$V9=[1,17],$Va=[1,18],$Vb=[6,8],$Vc=[2,154],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[1,24],$Vh=[18,35,37,38,39,40,41,42,43,44,47,48,52,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vi=[18,20,34,35,37,38,39,40,41,42,43,44,47,48,52,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vj=[2,168],$Vk=[1,35],$Vl=[6,8,14,16,17,19,148,152,154,156],$Vm=[1,48],$Vn=[1,66],$Vo=[1,57],$Vp=[1,64],$Vq=[1,65],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,63],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,62],$VC=[1,49],$VD=[1,50],$VE=[1,51],$VF=[1,40],$VG=[18,37,38,39,40,41,42,43,44,47,48,52,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$VH=[6,8,14,16,17,19,152,154,156],$VI=[2,151],$VJ=[1,86],$VK=[1,87],$VL=[6,8,14,16,17,19,45,135,140,146,148,152,154,156],$VM=[1,92],$VN=[1,89],$VO=[1,90],$VP=[1,91],$VQ=[1,93],$VR=[6,8,14,16,17,19,38,45,51,52,53,73,74,76,79,91,109,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$VS=[6,8,14,16,17,19,36,38,45,51,52,53,73,74,76,79,91,109,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$VT=[1,114],$VU=[1,112],$VV=[1,113],$VW=[1,108],$VX=[1,109],$VY=[1,110],$VZ=[1,111],$V_=[1,115],$V$=[1,116],$V01=[1,117],$V11=[1,118],$V21=[1,119],$V31=[1,120],$V41=[2,111],$V51=[6,8,14,16,17,19,36,38,45,47,51,52,53,73,74,76,79,81,83,91,93,94,95,96,97,98,99,100,101,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$V61=[6,8,14,16,17,19,36,38,45,47,51,52,53,73,74,76,79,81,83,91,93,94,95,96,97,98,99,100,101,103,105,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$V71=[1,121],$V81=[1,128],$V91=[2,72],$Va1=[1,129],$Vb1=[18,37,39,40,41,42,43,44,47,48,52,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vc1=[18,31,37,52,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,121],$Vd1=[1,179],$Ve1=[19,45],$Vf1=[2,67],$Vg1=[1,188],$Vh1=[1,186],$Vi1=[1,187],$Vj1=[6,8,140,148],$Vk1=[18,37,40,41,42,43,44,47,48,52,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vl1=[6,8,14,16,17,19,140,146,148,152,154,156],$Vm1=[6,8,14,16,17,19,38,45,51,52,53,73,74,76,79,91,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$Vn1=[6,8,14,16,17,19,36,38,45,51,52,53,73,74,76,79,91,93,94,95,96,101,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$Vo1=[6,8,14,16,17,19,36,38,45,51,52,53,73,74,76,79,81,83,91,93,94,95,96,101,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$Vp1=[18,37,41,42,43,44,47,48,52,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vq1=[18,37,42,43,44,47,48,52,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vr1=[18,37,44,47,48,52,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vs1=[73,76,79],$Vt1=[18,37,47,48,52,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vu1=[1,248],$Vv1=[1,249],$Vw1=[6,8,14,16,17,19],$Vx1=[6,8,14,16,17,19,45,159],$Vy1=[1,266],$Vz1=[1,262],$VA1=[2,205],$VB1=[1,270],$VC1=[1,271],$VD1=[6,8,14,16,17,19,45,131,137,140,146,148,152,154,156,184],$VE1=[1,273],$VF1=[1,276],$VG1=[1,277],$VH1=[1,278],$VI1=[1,279],$VJ1=[2,182],$VK1=[1,275],$VL1=[6,8,14,16,17,19,38,45,91,131,137,140,146,148,152,154,156,166,167,169,170,175,179,181,182,184],$VM1=[6,8,14,16,17,19,137,140,146,148,152,154,156],$VN1=[1,291],$VO1=[2,187],$VP1=[172,175],$VQ1=[6,8,14,16,17,19,38,45,91,131,137,140,146,148,152,154,156,166,167,169,170,175,179,181,182,184,194,195,196],$VR1=[2,207],$VS1=[1,296],$VT1=[1,308],$VU1=[1,316],$VV1=[1,317],$VW1=[1,318],$VX1=[6,8,14,16,17,19,140,148,152,154,156],$VY1=[1,328],$VZ1=[1,334],$V_1=[1,335],$V$1=[2,212],$V02=[1,346],$V12=[18,154],$V22=[6,8,14,16,17,19,154,156],$V32=[1,362];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"semicolonOpt":5,"EOF":6,"unionClause":7,";":8,"unionClauseNotParenthesized":9,"unionClauseParenthesized":10,"order_by_opt":11,"limit_opt":12,"selectClauseParenthesized":13,"UNION":14,"distinctOpt":15,"EXCEPT":16,"INTERSECT":17,"(":18,")":19,"SELECT":20,"highPriorityOpt":21,"maxStateMentTimeOpt":22,"straightJoinOpt":23,"sqlSmallResultOpt":24,"sqlBigResultOpt":25,"sqlBufferResultOpt":26,"sqlCacheOpt":27,"sqlCalcFoundRowsOpt":28,"selectExprList":29,"selectDataSetOpt":30,"ALL":31,"DISTINCT":32,"DISTINCTROW":33,"HIGH_PRIORITY":34,"MAX_STATEMENT_TIME":35,"=":36,"NUMERIC":37,"STRAIGHT_JOIN":38,"SQL_SMALL_RESULT":39,"SQL_BIG_RESULT":40,"SQL_BUFFER_RESULT":41,"SQL_CACHE":42,"SQL_NO_CACHE":43,"SQL_CALC_FOUND_ROWS":44,",":45,"selectExpr":46,"*":47,"SELECT_EXPR_STAR":48,"expr":49,"selectExprAliasOpt":50,"AS":51,"IDENTIFIER":52,"QUOTED_IDENTIFIER":53,"string":54,"STRING":55,"number":56,"EXPONENT_NUMERIC":57,"HEX_NUMERIC":58,"boolean":59,"TRUE":60,"FALSE":61,"null":62,"NULL":63,"literal":64,"function_call":65,"function_call_param_list":66,"function_call_param":67,"identifier":68,"DOT":69,"identifier_list":70,"case_expr_opt":71,"when_then_list":72,"WHEN":73,"THEN":74,"case_when_else":75,"ELSE":76,"case_when":77,"CASE":78,"END":79,"simple_expr_prefix":80,"+":81,"simple_expr":82,"-":83,"~":84,"!":85,"BINARY":86,"expr_list":87,"ROW":88,"EXISTS":89,"{":90,"}":91,"bit_expr":92,"|":93,"&":94,"<<":95,">>":96,"/":97,"DIV":98,"MOD":99,"%":100,"^":101,"not_opt":102,"NOT":103,"escape_opt":104,"ESCAPE":105,"predicate":106,"IN":107,"BETWEEN":108,"AND":109,"SOUNDS":110,"LIKE":111,"REGEXP":112,"comparison_operator":113,">=":114,">":115,"<=":116,"<":117,"<>":118,"!=":119,"sub_query_data_set_opt":120,"ANY":121,"boolean_primary":122,"IS":123,"boolean_extra":124,"UNKNOWN":125,"&&":126,"||":127,"OR":128,"XOR":129,"where_opt":130,"WHERE":131,"group_by_opt":132,"group_by":133,"roll_up_opt":134,"WITH":135,"ROLLUP":136,"GROUP_BY":137,"group_by_order_by_item_list":138,"order_by":139,"ORDER_BY":140,"group_by_order_by_item":141,"sort_opt":142,"ASC":143,"DESC":144,"having_opt":145,"HAVING":146,"limit":147,"LIMIT":148,"OFFSET":149,"procedure_opt":150,"procedure":151,"PROCEDURE":152,"for_update_lock_in_share_mode_opt":153,"FOR":154,"UPDATE":155,"LOCK":156,"SHARE":157,"MODE":158,"FROM":159,"table_references":160,"partitionOpt":161,"escaped_table_reference":162,"table_reference":163,"OJ":164,"join_inner_cross":165,"INNER":166,"CROSS":167,"left_right":168,"LEFT":169,"RIGHT":170,"out_opt":171,"OUTER":172,"left_right_out_opt":173,"join_table":174,"JOIN":175,"table_factor":176,"join_condition":177,"on_join_condition":178,"NATURAL":179,"join_condition_opt":180,"ON":181,"USING":182,"partition_names":183,"PARTITION":184,"aliasOpt":185,"index_or_key":186,"INDEX":187,"KEY":188,"for_opt":189,"identifier_list_opt":190,"index_hint_list_opt":191,"index_hint_list":192,"index_hint":193,"USE":194,"IGNORE":195,"FORCE":196,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:";",14:"UNION",16:"EXCEPT",17:"INTERSECT",18:"(",19:")",20:"SELECT",31:"ALL",32:"DISTINCT",33:"DISTINCTROW",34:"HIGH_PRIORITY",35:"MAX_STATEMENT_TIME",36:"=",37:"NUMERIC",38:"STRAIGHT_JOIN",39:"SQL_SMALL_RESULT",40:"SQL_BIG_RESULT",41:"SQL_BUFFER_RESULT",42:"SQL_CACHE",43:"SQL_NO_CACHE",44:"SQL_CALC_FOUND_ROWS",45:",",47:"*",48:"SELECT_EXPR_STAR",51:"AS",52:"IDENTIFIER",53:"QUOTED_IDENTIFIER",55:"STRING",57:"EXPONENT_NUMERIC",58:"HEX_NUMERIC",60:"TRUE",61:"FALSE",63:"NULL",69:"DOT",73:"WHEN",74:"THEN",76:"ELSE",78:"CASE",79:"END",81:"+",83:"-",84:"~",85:"!",86:"BINARY",88:"ROW",89:"EXISTS",90:"{",91:"}",93:"|",94:"&",95:"<<",96:">>",97:"/",98:"DIV",99:"MOD",100:"%",101:"^",103:"NOT",105:"ESCAPE",107:"IN",108:"BETWEEN",109:"AND",110:"SOUNDS",111:"LIKE",112:"REGEXP",114:">=",115:">",116:"<=",117:"<",118:"<>",119:"!=",121:"ANY",123:"IS",125:"UNKNOWN",126:"&&",127:"||",128:"OR",129:"XOR",131:"WHERE",135:"WITH",136:"ROLLUP",137:"GROUP_BY",140:"ORDER_BY",143:"ASC",144:"DESC",146:"HAVING",148:"LIMIT",149:"OFFSET",152:"PROCEDURE",154:"FOR",155:"UPDATE",156:"LOCK",157:"SHARE",158:"MODE",159:"FROM",164:"OJ",166:"INNER",167:"CROSS",169:"LEFT",170:"RIGHT",172:"OUTER",175:"JOIN",179:"NATURAL",181:"ON",182:"USING",184:"PARTITION",187:"INDEX",188:"KEY",194:"USE",195:"IGNORE",196:"FORCE"},
productions_: [0,[3,3],[3,3],[5,1],[5,0],[7,1],[7,3],[10,4],[10,4],[10,4],[10,4],[10,4],[10,4],[13,3],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[4,12],[15,1],[15,1],[15,1],[15,0],[21,1],[21,0],[22,3],[22,0],[23,1],[23,0],[24,1],[24,0],[25,1],[25,0],[26,1],[26,0],[27,0],[27,1],[27,1],[28,1],[28,0],[29,3],[29,1],[46,1],[46,1],[46,2],[50,0],[50,2],[50,1],[50,2],[50,1],[54,1],[54,1],[56,1],[56,1],[56,1],[59,1],[59,1],[62,1],[64,1],[64,1],[64,1],[64,1],[65,4],[66,3],[66,1],[67,0],[67,1],[67,1],[67,2],[67,1],[68,1],[68,3],[70,1],[70,3],[71,0],[71,1],[72,4],[72,5],[75,0],[75,2],[77,5],[80,2],[80,2],[80,2],[80,2],[80,2],[82,1],[82,1],[82,1],[82,1],[82,3],[82,4],[82,3],[82,4],[82,4],[82,1],[92,1],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[102,0],[102,1],[104,0],[104,2],[106,1],[106,6],[106,6],[106,6],[106,4],[106,5],[106,4],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[120,1],[120,1],[122,1],[122,4],[122,3],[122,6],[124,1],[124,1],[49,1],[49,4],[49,2],[49,3],[49,3],[49,3],[49,3],[49,3],[87,1],[87,3],[130,0],[130,2],[132,0],[132,1],[134,0],[134,2],[133,3],[11,0],[11,1],[139,3],[138,1],[138,3],[141,2],[142,0],[142,1],[142,1],[145,0],[145,2],[147,2],[147,4],[147,4],[12,0],[12,1],[150,0],[150,1],[151,2],[153,0],[153,2],[153,4],[30,0],[30,10],[160,1],[160,3],[162,1],[162,4],[165,0],[165,1],[165,1],[168,1],[168,1],[171,0],[171,1],[173,0],[173,2],[174,4],[174,5],[174,4],[174,6],[174,5],[180,0],[180,1],[178,2],[177,1],[177,4],[163,1],[163,1],[183,1],[183,3],[161,0],[161,4],[185,0],[185,2],[185,1],[186,1],[186,1],[189,0],[189,2],[189,2],[189,2],[190,0],[190,1],[191,0],[191,1],[192,1],[192,3],[193,6],[193,6],[193,6],[176,4],[176,4],[176,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:
 return {nodeType: 'Main', value: $$[$0-2], hasSemicolon: $$[$0-1]}; 
break;
case 3: case 152:
 this.$ = true 
break;
case 4:
 this.$ = false 
break;
case 5: case 21: case 22: case 23: case 25: case 27: case 29: case 31: case 33: case 35: case 38: case 39: case 40: case 60: case 61: case 62: case 63: case 68: case 69: case 71: case 77: case 81: case 88: case 89: case 90: case 91: case 97: case 98: case 112: case 114: case 115: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 135: case 137: case 148: case 150: case 155: case 161: case 162: case 164: case 169: case 171: case 172: case 183: case 184: case 185: case 186: case 188: case 197: case 199: case 201: case 202: case 210: case 211: case 217: case 219:
 this.$ = $$[$0] 
break;
case 6:
 this.$ = $$[$0-2], this.$.orderBy = $$[$0-1], this.$.limit = $$[$0]; 
break;
case 7: case 8:
 this.$ = { type: 'Union', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] }; 
break;
case 9: case 10:
 this.$ = { type: 'Except', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] }; 
break;
case 11: case 12:
 this.$ = { type: 'Intersect', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] }; 
break;
case 13:
 this.$ = { type: 'SelectParenthesized', value: $$[$0-1] }; 
break;
case 14: case 15:
 this.$ = { type: 'Union', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] } 
break;
case 16: case 17:
 this.$ = { type: 'Except', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] } 
break;
case 18: case 19:
 this.$ = { type: 'Intersect', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] } 
break;
case 20:

        this.$ = {
          type: 'Select',
          distinctOpt: $$[$0-10],
          highPriorityOpt: $$[$0-9],
          maxStateMentTimeOpt: $$[$0-8],
          straightJoinOpt: $$[$0-7],
          sqlSmallResultOpt: $$[$0-6],
          sqlBigResultOpt: $$[$0-5],
          sqlBufferResultOpt: $$[$0-4],
          sqlCacheOpt: $$[$0-3],
          sqlCalcFoundRowsOpt: $$[$0-2],
          selectItems: $$[$0-1],
          from: $$[$0].from,
          partition: $$[$0].partition,
          where: $$[$0].where,
          groupBy: $$[$0].groupBy,
          having: $$[$0].having,
          orderBy: $$[$0].orderBy,
          limit: $$[$0].limit,
          procedure: $$[$0].procedure,
          updateLockMode: $$[$0].updateLockMode
        }
      
break;
case 24: case 26: case 28: case 30: case 32: case 34: case 36: case 37: case 41: case 67: case 76: case 80: case 111: case 113: case 147: case 149: case 151: case 154: case 160: case 163: case 168: case 170: case 173: case 182: case 187: case 196: case 205: case 212: case 216: case 218:
 this.$ = null 
break;
case 42:
 $$[$0-2].value.push($$[$0]); 
break;
case 43:
 this.$ = { type: 'SelectExpr', value: [ $$[$0] ] } 
break;
case 44: case 45: case 72:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 46:
 this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; 
break;
case 47: case 207:
 this.$ = {alias: null, hasAs: null} 
break;
case 48: case 50:
 this.$ = {alias: $$[$0], hasAs: true} 
break;
case 49: case 51:
 this.$ = {alias: $$[$0], hasAs: false} 
break;
case 52: case 53:
 this.$ = { type: 'String', value: $$[$0] } 
break;
case 54: case 55: case 56:
 this.$ = { type: 'Number', value: $$[$0] } 
break;
case 57:
 this.$ = { type: 'Boolean', value: 'TRUE' } 
break;
case 58:
 this.$ = { type: 'Boolean', value: 'FALSE' } 
break;
case 59:
 this.$ = { type: 'Null', value: 'null' } 
break;
case 64:
 this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} 
break;
case 65:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 66:
 this.$ = [$$[$0]]; 
break;
case 70:
 this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } 
break;
case 73:
 this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] 
break;
case 74:
 this.$ = { type: 'IdentifierList', value: [ $$[$0] ] } 
break;
case 75: case 179:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 78:
 this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ] }; 
break;
case 79:
 this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); 
break;
case 82:
 this.$ = { type: 'CaseWhen', caseExprOpt: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } 
break;
case 83: case 84: case 85: case 86: case 87:
 this.$ = { type: 'Prefix', prefix: $$[$0-1], value: $$[$0] } 
break;
case 92:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-1] } 
break;
case 93:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-2], hasRow: true } 
break;
case 94:
 this.$ = { type: 'SubQuery', value: $$[$0-1] } 
break;
case 95:
 this.$ = { type: 'SubQuery', value: $$[$0-1], hasExists: true } 
break;
case 96:
 this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } 
break;
case 99:
 this.$ = { type: 'BitExpression', operator: '|', left: $$[$0-2], right: $$[$0] } 
break;
case 100:
 this.$ = { type: 'BitExpression', operator: '&', left: $$[$0-2], right: $$[$0] } 
break;
case 101:
 this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } 
break;
case 102:
 this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } 
break;
case 103:
 this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } 
break;
case 104:
 this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } 
break;
case 105:
 this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } 
break;
case 106:
 this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } 
break;
case 107:
 this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } 
break;
case 108:
 this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } 
break;
case 109:
 this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } 
break;
case 110:
 this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } 
break;
case 116:
 this.$ = { type: 'InSubQueryPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } 
break;
case 117:
 this.$ = { type: 'InExpressionListPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: $$[$0-1] } 
break;
case 118:
 this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-2], right: $$[$0] } } 
break;
case 119:
 this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } 
break;
case 120:
 this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } 
break;
case 121:
 this.$ = { type: 'RegexpPredicate', hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } 
break;
case 132:
 this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } 
break;
case 133:
 this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 134:
 this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } 
break;
case 136:
 this.$ = { type: 'BooleanExtra', value: $$[$0] } 
break;
case 138:
 this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } 
break;
case 139:
 this.$ = { type: 'NotExpression', value: $$[$0] } 
break;
case 140: case 143:
 this.$ = { type: 'AndExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 141: case 142:
 this.$ = { type: 'OrExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 144:
 this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 145:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 146: case 221:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 153:
 this.$ = { type: 'GroupBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 156:
 this.$ = { type: 'OrderBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 157: case 203:
 this.$ = [ $$[$0] ] 
break;
case 158:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 159:
 this.$ = { type: 'GroupByOrderByItem', value: $$[$0-1], sortOpt: $$[$0] } 
break;
case 165:
 this.$ = { type: 'Limit', value: [ $$[$0] ] } 
break;
case 166:
 this.$ = { type: 'Limit', value: [ $$[$0-2], $$[$0] ] } 
break;
case 167:
 this.$ = { type: 'Limit', value: [ $$[$0], $$[$0-2] ], offsetMode: true } 
break;
case 174:
 this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 175:
 this.$ = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0] 
break;
case 176:
 this.$ = {} 
break;
case 177:
 this.$ = { from: $$[$0-8], partition: $$[$0-7], where: $$[$0-6], groupBy: $$[$0-5], having: $$[$0-4], orderBy: $$[$0-3], limit: $$[$0-2], procedure: $$[$0-1], updateLockMode: $$[$0] } 
break;
case 178:
 this.$ = { type: 'TableReferences', value: [ $$[$0] ] } 
break;
case 180:
 this.$ = { type: 'TableReference', value: $$[$0] } 
break;
case 181:
 this.$ = { type: 'TableReference', hasOj: true, value: $$[$0-1] } 
break;
case 189:
 this.$ = { leftRight: null, outOpt: null } 
break;
case 190:
 this.$ = { leftRight: $$[$0-1], outOpt: $$[$0] } 
break;
case 191:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-2], left: $$[$0-3], right: $$[$0], condition: null } 
break;
case 192:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-3], left: $$[$0-4], right: $$[$0-1], condition: $$[$0] } 
break;
case 193:
 this.$ = { type: 'StraightJoinTable', left: $$[$0-3], right: $$[$0-1], condition: $$[$0] } 
break;
case 194:
 this.$ = { type: 'LeftRightJoinTable', leftRight: $$[$0-4], outOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1], condition: $$[$0] } 
break;
case 195:
 this.$ = { type: 'NaturalJoinTable', leftRight: $$[$0-2].leftRight, outOpt: $$[$0-2].outOpt, left: $$[$0-4], right: $$[$0] } 
break;
case 198:
 this.$ = { type: 'OnJoinCondition', value: $$[$0] } 
break;
case 200:
 this.$ = { type: 'UsingJoinCondition', value: $$[$0-1] } 
break;
case 204:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]) 
break;
case 206:
 this.$ = { type: 'Partitions', value: $$[$0-1] } 
break;
case 208:
 this.$ = { hasAs: true, alias: $$[$0] } 
break;
case 209:
 this.$ = { hasAs: false, alias: $$[$0] } 
break;
case 213: case 214: case 215:
 this.$ = { type: 'ForOptIndexHint', value: $$[$0] } 
break;
case 220:
 this.$ = { type: 'IndexHintList', value: [ $$[$0] ] } 
break;
case 222:
 this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 223:
 this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 224:
 this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 225:
 this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs, indexHintOpt: $$[$0] } 
break;
case 226:
 this.$ = { type: 'TableFactor', value: { type: 'SubQuery', value: $$[$0-2] }, alias: $$[$0].alias, hasAs: $$[$0].hasAs} 
break;
case 227:
 this.$ = $$[$0-1]; this.$.hasParentheses = true 
break;
}
},
table: [{3:1,4:2,7:3,9:5,10:6,13:7,18:$V0,20:$V1},{1:[3]},{5:9,6:$V2,8:$V3,14:$V4,16:$V5,17:$V6},{5:14,6:$V2,8:$V3},o([18,34,35,37,38,39,40,41,42,43,44,47,48,52,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$V7,{15:15,31:$V8,32:$V9,33:$Va}),o($Vb,[2,5]),o([6,8,148],$Vc,{11:19,139:20,140:$Vd}),{14:$Ve,16:$Vf,17:$Vg},{4:25,20:$V1},{6:[1,26]},{15:27,20:$V7,31:$V8,32:$V9,33:$Va},{15:28,20:$V7,31:$V8,32:$V9,33:$Va},{15:29,20:$V7,31:$V8,32:$V9,33:$Va},{6:[2,3]},{6:[1,30]},o($Vh,[2,26],{21:31,34:[1,32]}),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),o($Vb,$Vj,{12:33,147:34,148:$Vk}),o($Vl,[2,155]),{18:$Vm,37:$Vn,49:38,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39,138:36,141:37},{15:72,18:$V7,31:$V8,32:$V9,33:$Va},{15:73,18:$V7,31:$V8,32:$V9,33:$Va},{15:74,18:$V7,31:$V8,32:$V9,33:$Va},{19:[1,75]},{1:[2,1]},{4:76,9:77,20:$V1},{4:78,9:79,20:$V1},{4:80,9:81,20:$V1},{1:[2,2]},o($VG,[2,28],{22:82,35:[1,83]}),o($Vh,[2,25]),o($Vb,[2,6]),o($VH,[2,169]),{37:[1,84]},o($Vl,$VI,{134:85,45:$VJ,135:$VK}),o($VL,[2,157]),o($VL,[2,160],{142:88,109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,143:[1,94],144:[1,95]}),o($VR,[2,137],{113:97,36:[1,98],114:[1,99],115:[1,100],116:[1,101],117:[1,102],118:[1,103],119:[1,104],123:[1,96]}),{18:$Vm,37:$Vn,49:105,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o($VS,[2,131]),o($VS,[2,115],{102:106,47:$VT,81:$VU,83:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,103:$V31,107:$V41,108:$V41,111:$V41,112:$V41,110:[1,107]}),o($V51,[2,98]),o($V61,[2,88]),o($V61,[2,89],{69:$V71}),o($V61,[2,90]),o($V61,[2,91]),{4:123,18:$Vm,20:$V1,37:$Vn,49:124,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,87:122,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},{18:[1,125]},{18:[1,126]},{52:$V81,68:127},o($V61,[2,97]),o($V61,[2,60]),o($V61,[2,61]),o($V61,[2,62]),o($V61,[2,63]),o([6,8,14,16,17,19,36,38,45,47,51,52,53,69,73,74,76,79,81,83,91,93,94,95,96,97,98,99,100,101,103,105,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$V91,{18:$Va1}),{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:130,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:131,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:132,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:133,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:134,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE},{18:$Vm,37:$Vn,49:136,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,71:135,73:[2,76],77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o($V61,[2,52]),o($V61,[2,53]),o($V61,[2,54]),o($V61,[2,55]),o($V61,[2,56]),o($V61,[2,57]),o($V61,[2,58]),o($V61,[2,59]),{10:138,13:137,18:$V0},{10:140,13:139,18:$V0},{10:142,13:141,18:$V0},o([6,8,14,16,17,140,148],[2,13]),o($Vb,[2,14],{14:$V4,16:$V5,17:$V6}),o($Vb,[2,15]),o($Vb,[2,16],{14:$V4,16:$V5,17:$V6}),o($Vb,[2,17]),o($Vb,[2,18],{14:$V4,16:$V5,17:$V6}),o($Vb,[2,19]),o($Vb1,[2,30],{23:143,38:[1,144]}),{36:[1,145]},o($VH,[2,165],{45:[1,146],149:[1,147]}),o($Vl,[2,156]),{18:$Vm,37:$Vn,49:38,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39,141:148},{136:[1,149]},o($VL,[2,159]),{18:$Vm,37:$Vn,49:150,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},{18:$Vm,37:$Vn,49:151,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},{18:$Vm,37:$Vn,49:152,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},{18:$Vm,37:$Vn,49:153,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},{18:$Vm,37:$Vn,49:154,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o($VL,[2,161]),o($VL,[2,162]),o([60,61,63,125],$V41,{102:155,103:$V31}),{18:$Vm,31:[1,158],37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,106:156,120:157,121:[1,159]},o($Vc1,[2,122]),o($Vc1,[2,123]),o($Vc1,[2,124]),o($Vc1,[2,125]),o($Vc1,[2,126]),o($Vc1,[2,127]),o($Vc1,[2,128]),o($VR,[2,139]),{107:[1,160],108:[1,161],111:[1,162],112:[1,163]},{111:[1,164]},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:165},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:166},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:167},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:168},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:169},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:170},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:171},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:172},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:173},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:174},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:175},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:176},o([60,61,63,107,108,111,112,125],[2,112]),{52:[1,177]},{19:[1,178],45:$Vd1},{19:[1,180]},o($Ve1,[2,145],{109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ}),{18:$Vm,37:$Vn,49:124,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,87:181,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},{4:182,20:$V1},{18:$Vm,37:$Vn,49:183,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,69:$V71,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o([6,8,14,16,17,18,19,37,38,45,51,52,53,55,57,58,60,61,63,69,78,81,83,84,85,86,88,89,90,91,103,131,137,140,146,148,152,154,156,166,167,169,170,175,179,181,182,184,194,195,196],$V91),o($Ve1,$Vf1,{122:39,106:41,92:42,82:43,64:44,68:45,65:46,80:47,77:52,54:53,56:54,59:55,62:56,66:184,67:185,49:189,18:$Vm,32:$Vg1,37:$Vn,47:$Vh1,48:$Vi1,52:$Vo,53:$Vp,55:$Vq,57:$Vr,58:$Vs,60:$Vt,61:$Vu,63:$Vv,78:$Vw,81:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,103:$VF}),o($V61,[2,83]),o($V61,[2,84]),o($V61,[2,85]),o($V61,[2,86]),o($V61,[2,87]),{72:190,73:[1,191]},{73:[2,77],109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ},o($Vj1,[2,7],{14:$Ve,16:$Vf,17:$Vg}),o($Vj1,[2,8]),o($Vj1,[2,9],{14:$Ve,16:$Vf,17:$Vg}),o($Vj1,[2,10]),o($Vj1,[2,11],{14:$Ve,16:$Vf,17:$Vg}),o($Vj1,[2,12]),o($Vk1,[2,32],{24:192,39:[1,193]}),o($Vb1,[2,29]),{37:[1,194]},{37:[1,195]},{37:[1,196]},o($VL,[2,158]),o($Vl1,[2,152]),o($VR,[2,140]),o($Vm1,[2,141],{109:$VM,126:$VN}),o($Vm1,[2,142],{109:$VM,126:$VN}),o($VR,[2,143]),o($Vm1,[2,144],{109:$VM,126:$VN}),{59:199,60:$Vt,61:$Vu,63:[1,198],124:197,125:[1,200]},o($VS,[2,133]),{18:[1,201]},{18:[2,129]},{18:[2,130]},{18:[1,202]},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:203},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:204,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:205},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:206},o([6,8,14,16,17,19,36,38,45,51,52,53,73,74,76,79,91,93,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],[2,99],{47:$VT,81:$VU,83:$VV,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o([6,8,14,16,17,19,36,38,45,51,52,53,73,74,76,79,91,93,94,101,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],[2,100],{47:$VT,81:$VU,83:$VV,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11}),o($Vn1,[2,101],{47:$VT,81:$VU,83:$VV,97:$V_,98:$V$,99:$V01,100:$V11}),o($Vn1,[2,102],{47:$VT,81:$VU,83:$VV,97:$V_,98:$V$,99:$V01,100:$V11}),o($Vo1,[2,103],{47:$VT,97:$V_,98:$V$,99:$V01,100:$V11}),o($Vo1,[2,104],{47:$VT,97:$V_,98:$V$,99:$V01,100:$V11}),o($V51,[2,105]),o($V51,[2,106]),o($V51,[2,107]),o($V51,[2,108]),o($V51,[2,109]),o([6,8,14,16,17,19,36,38,45,51,52,53,73,74,76,79,91,93,101,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],[2,110],{47:$VT,81:$VU,83:$VV,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11}),o([6,8,14,16,17,18,19,36,37,38,45,47,51,52,53,55,57,58,60,61,63,69,73,74,76,78,79,81,83,84,85,86,88,89,90,91,93,94,95,96,97,98,99,100,101,103,105,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184,194,195,196],[2,73]),o($V61,[2,92]),{18:$Vm,37:$Vn,49:207,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o($V61,[2,94]),{19:[1,208],45:$Vd1},{19:[1,209]},{91:[1,210],109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ},{19:[1,211],45:[1,212]},o($Ve1,[2,66]),o($Ve1,[2,68]),o($Ve1,[2,69]),{18:$Vm,37:$Vn,49:213,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o($Ve1,[2,71],{109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ}),{73:[1,215],75:214,76:[1,216],79:[2,80]},{18:$Vm,37:$Vn,49:217,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o($Vp1,[2,34],{25:218,40:[1,219]}),o($Vk1,[2,31]),o($VG,[2,27]),o($VH,[2,166]),o($VH,[2,167]),o($VR,[2,138]),o($VS,[2,132]),o($VR,[2,135]),o($VR,[2,136]),{4:220,20:$V1},{4:221,18:$Vm,20:$V1,37:$Vn,49:124,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,87:222,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},{47:$VT,81:$VU,83:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,109:[1,223]},o($VS,[2,113],{104:224,105:[1,225]}),o($VS,[2,121],{47:$VT,81:$VU,83:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o($VS,[2,119],{47:$VT,81:$VU,83:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o($Ve1,[2,146],{109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ}),o($V61,[2,93]),o($V61,[2,95]),o($V61,[2,96]),o($V61,[2,64]),o($Ve1,$Vf1,{122:39,106:41,92:42,82:43,64:44,68:45,65:46,80:47,77:52,54:53,56:54,59:55,62:56,49:189,67:226,18:$Vm,32:$Vg1,37:$Vn,47:$Vh1,48:$Vi1,52:$Vo,53:$Vp,55:$Vq,57:$Vr,58:$Vs,60:$Vt,61:$Vu,63:$Vv,78:$Vw,81:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,103:$VF}),o($Ve1,[2,70],{109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ}),{79:[1,227]},{18:$Vm,37:$Vn,49:228,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},{18:$Vm,37:$Vn,49:229,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},{74:[1,230],109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ},o($Vq1,[2,36],{26:231,41:[1,232]}),o($Vp1,[2,33]),{19:[1,233]},{19:[1,234]},{19:[1,235],45:$Vd1},{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,106:236},o($VS,[2,120]),{18:$Vm,37:$Vn,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:237,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE},o($Ve1,[2,65]),o($V61,[2,82]),{74:[1,238],109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ},{79:[2,81],109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ},{18:$Vm,37:$Vn,49:239,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o($Vr1,[2,37],{27:240,42:[1,241],43:[1,242]}),o($Vq1,[2,35]),o($VS,[2,134]),o($VS,[2,116]),o($VS,[2,117]),o($VS,[2,118]),o($VS,[2,114]),{18:$Vm,37:$Vn,49:243,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o($Vs1,[2,78],{109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ}),o($Vt1,[2,41],{28:244,44:[1,245]}),o($Vr1,[2,38]),o($Vr1,[2,39]),o($Vs1,[2,79],{109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ}),{18:$Vm,29:246,37:$Vn,46:247,47:$Vu1,48:$Vv1,49:250,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o($Vt1,[2,40]),o($Vw1,[2,176],{30:251,45:[1,252],159:[1,253]}),o($Vx1,[2,43]),o($Vx1,[2,44]),o($Vx1,[2,45]),o($Vx1,[2,47],{50:254,51:[1,255],52:[1,256],53:[1,257],109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ}),o($Vw1,[2,20]),{18:$Vm,37:$Vn,46:258,47:$Vu1,48:$Vv1,49:250,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},{18:$Vy1,52:$V81,68:265,90:$Vz1,160:259,162:260,163:261,174:264,176:263},o($Vx1,[2,46]),{52:[1,267],53:[1,268]},o($Vx1,[2,49]),o($Vx1,[2,51]),o($Vx1,[2,42]),o([6,8,14,16,17,19,131,137,140,146,148,152,154,156],$VA1,{161:269,45:$VB1,184:$VC1}),o($VD1,[2,178]),o($VD1,[2,180],{165:272,168:274,38:$VE1,166:$VF1,167:$VG1,169:$VH1,170:$VI1,175:$VJ1,179:$VK1}),{164:[1,280]},o($VL1,[2,201]),o($VL1,[2,202]),o([6,8,14,16,17,19,38,45,51,52,91,131,137,140,146,148,152,154,156,166,167,169,170,175,179,181,182,194,195,196],$VA1,{161:281,69:$V71,184:$VC1}),{4:282,18:$Vy1,20:$V1,52:$V81,68:265,90:$Vz1,160:283,162:260,163:261,174:264,176:263},o($Vx1,[2,48]),o($Vx1,[2,50]),o($VM1,[2,147],{130:284,131:[1,285]}),{18:$Vy1,52:$V81,68:265,90:$Vz1,162:286,163:261,174:264,176:263},{18:[1,287]},{175:[1,288]},{18:$Vy1,52:$V81,68:265,176:289},{171:290,172:$VN1,175:$VO1},{168:293,169:$VH1,170:$VI1,173:292,175:[2,189]},{175:[2,183]},{175:[2,184]},o($VP1,[2,185]),o($VP1,[2,186]),{18:$Vy1,52:$V81,68:265,163:294,174:264,176:263},o($VQ1,$VR1,{185:295,68:297,51:$VS1,52:$V81}),{19:[1,298]},{19:[1,299],45:$VB1},o($Vl1,[2,149],{132:300,133:301,137:[1,302]}),{18:$Vm,37:$Vn,49:303,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o($VD1,[2,179]),{52:$V81,68:305,183:304},{18:$Vy1,52:$V81,68:265,176:306},{178:307,181:$VT1},{175:[1,309]},{175:[2,188]},{175:[1,310]},{171:311,172:$VN1,175:$VO1},{38:$VE1,91:[1,312],165:272,166:$VF1,167:$VG1,168:274,169:$VH1,170:$VI1,175:$VJ1,179:$VK1},o($VL1,[2,218],{191:313,192:314,193:315,194:$VU1,195:$VV1,196:$VW1}),{52:$V81,68:319},o($VQ1,[2,209],{69:$V71}),o($VL1,$VR1,{68:297,185:320,51:$VS1,52:$V81}),o($VL1,[2,227]),o($VX1,[2,163],{145:321,146:[1,322]}),o($Vl1,[2,150]),{18:$Vm,37:$Vn,49:38,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39,138:323,141:37},o($VM1,[2,148],{109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ}),{19:[1,324],45:[1,325]},o($Ve1,[2,203],{69:$V71}),o([6,8,14,16,17,19,38,45,91,131,137,140,146,148,152,154,156,166,167,169,170,175,179,184],[2,191],{177:326,178:327,181:$VT1,182:$VY1}),o($VL1,[2,193]),{18:$Vm,37:$Vn,49:329,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},{18:$Vy1,52:$V81,68:265,163:330,174:264,176:263},{18:$Vy1,52:$V81,68:265,176:331},{175:[2,190]},o($VD1,[2,181]),o($VL1,[2,225]),o($VL1,[2,219]),o($VL1,[2,220]),{186:333,187:$VZ1,188:$V_1},{186:336,187:$VZ1,188:$V_1},{186:337,187:$VZ1,188:$V_1},o($VQ1,[2,208],{69:$V71}),o($VL1,[2,226]),o($Vl,$Vc,{139:20,11:338,140:$Vd}),{18:$Vm,37:$Vn,49:339,52:$Vo,53:$Vp,54:53,55:$Vq,56:54,57:$Vr,58:$Vs,59:55,60:$Vt,61:$Vu,62:56,63:$Vv,64:44,65:46,68:45,77:52,78:$Vw,80:47,81:$Vx,82:43,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VC,89:$VD,90:$VE,92:42,103:$VF,106:41,122:39},o($Vl1,$VI,{134:340,45:$VJ,135:$VK}),o([6,8,14,16,17,19,38,45,51,52,91,131,137,140,146,148,152,154,156,166,167,169,170,175,179,181,182,184,194,195,196],[2,206]),{52:$V81,68:341},o($VL1,[2,192]),o($VL1,[2,199]),{18:[1,342]},o($VL1,[2,198],{109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ}),{38:$VE1,165:272,166:$VF1,167:$VG1,168:274,169:$VH1,170:$VI1,175:$VJ1,177:343,178:327,179:$VK1,181:$VT1,182:$VY1},o($VL1,[2,195]),{193:344,194:$VU1,195:$VV1,196:$VW1},{18:$V$1,154:$V02,189:345},o($V12,[2,210]),o($V12,[2,211]),{18:$V$1,154:$V02,189:347},{18:$V$1,154:$V02,189:348},o($VH,$Vj,{147:34,12:349,148:$Vk}),o($VX1,[2,164],{109:$VM,126:$VN,127:$VO,128:$VP,129:$VQ}),o($Vl1,[2,153]),o($Ve1,[2,204],{69:$V71}),{52:$V81,68:351,70:350},o($VL1,[2,194]),o($VL1,[2,221]),{18:[1,352]},{137:[1,355],140:[1,354],175:[1,353]},{18:[1,356]},{18:[1,357]},o($V22,[2,170],{150:358,151:359,152:[1,360]}),{19:[1,361],45:$V32},o($Ve1,[2,74],{69:$V71}),{19:[2,216],52:$V81,68:351,70:364,190:363},{18:[2,213]},{18:[2,214]},{18:[2,215]},{52:$V81,68:351,70:365},{52:$V81,68:351,70:366},o($Vw1,[2,173],{153:367,154:[1,368],156:[1,369]}),o($V22,[2,171]),{52:[1,371],65:370},o($VL1,[2,200]),{52:$V81,68:372},{19:[1,373]},{19:[2,217],45:$V32},{19:[1,374],45:$V32},{19:[1,375],45:$V32},o($Vw1,[2,177]),{155:[1,376]},{107:[1,377]},o($V22,[2,172]),{18:$Va1},o($Ve1,[2,75],{69:$V71}),o($VL1,[2,222]),o($VL1,[2,223]),o($VL1,[2,224]),o($Vw1,[2,174]),{157:[1,378]},{158:[1,379]},o($Vw1,[2,175])],
defaultActions: {13:[2,3],26:[2,1],30:[2,2],158:[2,129],159:[2,130],276:[2,183],277:[2,184],291:[2,188],311:[2,190],353:[2,213],354:[2,214],355:[2,215]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip sql comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 52
break;
case 5:return 52
break;
case 6:return 52
break;
case 7:return 20
break;
case 8:return 31
break;
case 9:return 121
break;
case 10:return 32
break;
case 11:return 33
break;
case 12:return 34
break;
case 13:return 35
break;
case 14:return 38
break;
case 15:return 39
break;
case 16:return 40
break;
case 17:return 41
break;
case 18:return 42
break;
case 19:return 43
break;
case 20:return 44
break;
case 21:return 48
break;
case 22:return 51
break;
case 23:return 60
break;
case 24:return 61
break;
case 25:return 63
break;
case 26:return 'COLLATE'
break;
case 27:return 86
break;
case 28:return 88
break;
case 29:return 89
break;
case 30:return 78
break;
case 31:return 73
break;
case 32:return 74
break;
case 33:return 76
break;
case 34:return 79
break;
case 35:return 98
break;
case 36:return 99
break;
case 37:return 103
break;
case 38:return 108
break;
case 39:return 107
break;
case 40:return 110
break;
case 41:return 111
break;
case 42:return 105
break;
case 43:return 112
break;
case 44:return 123
break;
case 45:return 125
break;
case 46:return 109
break;
case 47:return 128
break;
case 48:return 129
break;
case 49:return 159
break;
case 50:return 184
break;
case 51:return 194
break;
case 52:return 187
break;
case 53:return 188
break;
case 54:return 154
break;
case 55:return 175
break;
case 56:return 140
break;
case 57:return 137
break;
case 58:return 195
break;
case 59:return 196
break;
case 60:return 166
break;
case 61:return 167
break;
case 62:return 181
break;
case 63:return 182
break;
case 64:return 169
break;
case 65:return 170
break;
case 66:return 172
break;
case 67:return 179
break;
case 68:return 131
break;
case 69:return 143
break;
case 70:return 144
break;
case 71:return 135
break;
case 72:return 136
break;
case 73:return 146
break;
case 74:return 149
break;
case 75:return 152
break;
case 76:return 155
break;
case 77:return 156
break;
case 78:return 157
break;
case 79:return 158
break;
case 80:return 164
break;
case 81:return 148
break;
case 82:return 14
break;
case 83:return 16
break;
case 84:return 17
break;
case 85:return 45
break;
case 86:return 36
break;
case 87:return 18
break;
case 88:return 19
break;
case 89:return 84
break;
case 90:return 119
break;
case 91:return 85
break;
case 92:return 93
break;
case 93:return 94
break;
case 94:return 81
break;
case 95:return 83
break;
case 96:return 47
break;
case 97:return 97
break;
case 98:return 100
break;
case 99:return 101
break;
case 100:return 96
break;
case 101:return 114
break;
case 102:return 115
break;
case 103:return 95
break;
case 104:return '<=>'
break;
case 105:return 116
break;
case 106:return 118
break;
case 107:return 117
break;
case 108:return 90
break;
case 109:return 91
break;
case 110:return 8
break;
case 111:return 55
break;
case 112:return 55
break;
case 113:return 58
break;
case 114:return 37
break;
case 115:return 57
break;
case 116:return 52
break;
case 117:return 69
break;
case 118:return 53
break;
case 119:return 53
break;
case 120:return 6
break;
case 121:return 'INVALID'
break;
}
},
rules: [/^(?:[/][*](.|\n)*?[*][/])/i,/^(?:[-][-]\s.*\n)/i,/^(?:[#]\s.*\n)/i,/^(?:\s+)/i,/^(?:[`][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*[`])/i,/^(?:[\w]+[\u4e00-\u9fa5]+[0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:[\u4e00-\u9fa5][0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:SELECT\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTINCTROW\b)/i,/^(?:HIGH_PRIORITY\b)/i,/^(?:MAX_STATEMENT_TIME\b)/i,/^(?:STRAIGHT_JOIN\b)/i,/^(?:SQL_SMALL_RESULT\b)/i,/^(?:SQL_BIG_RESULT\b)/i,/^(?:SQL_BUFFER_RESULT\b)/i,/^(?:SQL_CACHE\b)/i,/^(?:SQL_NO_CACHE\b)/i,/^(?:SQL_CALC_FOUND_ROWS\b)/i,/^(?:([a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*\.){1,2}\*)/i,/^(?:AS\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:COLLATE\b)/i,/^(?:BINARY\b)/i,/^(?:ROW\b)/i,/^(?:EXISTS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:DIV\b)/i,/^(?:MOD\b)/i,/^(?:NOT\b)/i,/^(?:BETWEEN\b)/i,/^(?:IN\b)/i,/^(?:SOUNDS\b)/i,/^(?:LIKE\b)/i,/^(?:ESCAPE\b)/i,/^(?:REGEXP\b)/i,/^(?:IS\b)/i,/^(?:UNKNOWN\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:XOR\b)/i,/^(?:FROM\b)/i,/^(?:PARTITION\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:KEY\b)/i,/^(?:FOR\b)/i,/^(?:JOIN\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:IGNORE\b)/i,/^(?:FORCE\b)/i,/^(?:INNER\b)/i,/^(?:CROSS\b)/i,/^(?:ON\b)/i,/^(?:USING\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:OUTER\b)/i,/^(?:NATURAL\b)/i,/^(?:WHERE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:WITH\b)/i,/^(?:ROLLUP\b)/i,/^(?:HAVING\b)/i,/^(?:OFFSET\b)/i,/^(?:PROCEDURE\b)/i,/^(?:UPDATE\b)/i,/^(?:LOCK\b)/i,/^(?:SHARE\b)/i,/^(?:MODE\b)/i,/^(?:OJ\b)/i,/^(?:LIMIT\b)/i,/^(?:UNION\b)/i,/^(?:EXCEPT\b)/i,/^(?:INTERSECT\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<<)/i,/^(?:<=>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?[eE][-][0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*)/i,/^(?:\.)/i,/^(?:['"][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*["'])/i,/^(?:[`].+[`])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();if (!sqlParser) {
  sqlParser = {};
}

function Sql() {
  this.buffer = '';
}

sqlParser.stringify = function(ast) {
  var sql = new Sql();
  sql.travelMain(ast);
  return sql.buffer;
};

Sql.prototype.travel = function(ast) {
  if (!ast) return;

  if (typeof ast === 'string') {
    return this.append(ast);
  }

  var processor = this['travel' + ast.type];
  processor.call(this, ast);
};

var noSuffixFlag = false;
Sql.prototype.appendKeyword = function(keyword, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += keyword.toUpperCase();
  } else {
    this.buffer += ' ' + keyword.toUpperCase();
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
};
Sql.prototype.append = function(word, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += word;
  } else {
    this.buffer += ' ' + word;
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
};
Sql.prototype.travelMain = function(ast) {
  this.travel(ast.value);
  if (ast.hasSemicolon) {
    this.append(';', true);
  }
};
Sql.prototype.travelSelect = function(ast) {
  this.appendKeyword('select');
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  if (ast.highPriorityOpt) {
    this.appendKeyword(ast.highPriorityOpt);
  }
  if (ast.maxStateMentTimeOpt) {
    this.append('MAX_STATEMENT_TIME = ' + ast.maxStateMentTimeOpt);
  }
  if (ast.straightJoinOpt) {
    this.appendKeyword(ast.straightJoinOpt);
  }
  if (ast.sqlSmallResultOpt) {
    this.appendKeyword(ast.sqlSmallResultOpt);
  }
  if (ast.sqlBigResultOpt) {
    this.appendKeyword(ast.sqlBigResultOpt);
  }
  if (ast.sqlBufferResultOpt) {
    this.appendKeyword(ast.sqlBufferResultOpt);
  }
  if (ast.sqlCacheOpt) {
    this.appendKeyword(ast.sqlCacheOpt);
  }
  if (ast.sqlCalcFoundRowsOpt) {
    this.appendKeyword(ast.sqlCalcFoundRowsOpt);
  }
  if (ast.selectItems) {
    this.travelSelectExpr(ast.selectItems);
  }
  if (ast.from) {
    this.appendKeyword('from');
    this.travel(ast.from);
  }
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.where) {
    this.appendKeyword('where');
    this.travel(ast.where);
  }
  if (ast.groupBy) {
    this.travel(ast.groupBy);
  }
  if (ast.having) {
    this.appendKeyword('having');
    this.travel(ast.having);
  }
  if (ast.orderBy) {
    this.travel(ast.orderBy);
  }
  if (ast.limit) {
    this.travel(ast.limit);
  }
  if (ast.procedure) {
    this.appendKeyword('procedure');
    this.travel(ast.procedure);
  }
  if (ast.updateLockMode) {
    this.appendKeyword(ast.updateLockMode);
  }
};
Sql.prototype.travelSelectExpr = function(ast) {
  var exprList = ast.value;
  for (var i = 0; i < exprList.length; i++) {
    if (typeof ast === 'string') {
      this.append(exprList[i]);
    } else {
      this.travel(exprList[i]);
      if (exprList[i].alias) {
        if (exprList[i].hasAs) {
          this.appendKeyword('as');
        }
        this.travel(exprList[i].alias);
      }
    }
    if (i !== exprList.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelIsExpression = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('in');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.append(ast.right);
};
Sql.prototype.travelNotExpression = function(ast) {
  this.appendKeyword('not');
  this.travel(ast.value);
};
Sql.prototype.travelOrExpression = Sql.prototype.travelAndExpression = Sql.prototype.travelXORExpression = function(
  ast
) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
};
Sql.prototype.travelNull = Sql.prototype.travelBoolean = Sql.prototype.travelBooleanExtra = function(
  ast
) {
  this.appendKeyword(ast.value);
};
Sql.prototype.travelNumber = function(ast) {
  this.append(ast.value);
};
Sql.prototype.travelString = function(ast) {
  this.append(ast.value);
};
Sql.prototype.travelFunctionCall = function(ast) {
  this.append(ast.name);
  this.append('(', true, true);
  var params = ast.params;
  for (var i = 0; i < params.length; i++) {
    var param = params[i];
    this.travel(param);
    if (i !== params.length - 1) {
      this.append(',', true);
    }
  }
  this.append(')', true);
};
Sql.prototype.travelFunctionCallParam = function(ast) {
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  this.travel(ast.value);
};
Sql.prototype.travelIdentifier = function(ast) {
  this.append(ast.value);
};
Sql.prototype.travelIdentifierList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelWhenThenList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.appendKeyword('when');
    this.travel(list[i].when);
    this.appendKeyword('then');
    this.travel(list[i].then);
  }
};
Sql.prototype.travelCaseWhen = function(ast) {
  this.appendKeyword('case');
  if (ast.caseExprOpt) {
    this.travel(ast.caseExprOpt);
  }
  this.travel(ast.whenThenList);
  if (ast.else) {
    this.appendKeyword('else');
    this.travel(ast.else);
  }
  this.appendKeyword('end');
};
Sql.prototype.travelPrefix = function(ast) {
  this.appendKeyword(ast.prefix);
  this.travel(ast.value);
};
Sql.prototype.travelSimpleExprParentheses = function(ast) {
  if (ast.hasRow) {
    this.appendKeyword('row');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
};
Sql.prototype.travelSubQuery = function(ast) {
  if (ast.hasExists) {
    this.appendKeyword('exists');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
};
Sql.prototype.travelIdentifierExpr = function(ast) {
  this.append('{');
  this.travel(ast.identifier);
  this.travel(ast.value);
  this.append('}');
};
Sql.prototype.travelBitExpression = function(ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
};
Sql.prototype.travelInSubQueryPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
};
Sql.prototype.travelInExpressionListPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
};
Sql.prototype.travelBetweenPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('between');
  this.travel(ast.right.left);
  this.appendKeyword('and');
  this.travel(ast.right.right);
};
Sql.prototype.travelSoundsLikePredicate = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('sounds');
  this.appendKeyword('like');
  this.travel(ast.right);
};
Sql.prototype.travelLikePredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('like');
  this.travel(ast.right);
  if (ast.escape) {
    this.appendKeyword('escape');
    this.travel(ast.escape);
  }
};
Sql.prototype.travelRegexpPredicate = function(ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('regexp');
  this.travel(ast.right);
};
Sql.prototype.travelIsNullBooleanPrimary = function(ast) {
  this.travel(ast.value);
  this.appendKeyword('is');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('null');
};
Sql.prototype.travelComparisonBooleanPrimary = function(ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.travel(ast.right);
};
Sql.prototype.travelComparisonSubQueryBooleanPrimary = function(ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.appendKeyword(ast.subQueryOpt);
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
};
Sql.prototype.travelExpressionList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelGroupBy = function(ast) {
  this.appendKeyword('group by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelOrderBy = function(ast) {
  this.appendKeyword('order by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.rollUp) {
    this.appendKeyword('with rollup');
  }
};
Sql.prototype.travelGroupByOrderByItem = function(ast) {
  this.travel(ast.value);
  if (ast.sortOpt) {
    this.appendKeyword(ast.sortOpt);
  }
};
Sql.prototype.travelLimit = function(ast) {
  this.appendKeyword('limit');
  var list = ast.value;
  if (list.length === 1) {
    this.append(list[0]);
  } else if (list.length === 2) {
    if (ast.offsetMode) {
      this.append(list[1]);
      this.append('offset');
      this.append(list[0]);
    } else {
      this.append(list[0]);
      this.append(',', true);
      this.append(list[1]);
    }
  }
};
Sql.prototype.travelTableReferences = function(ast) {
  var list = ast.value;
  if (ast.TableReferences) {
    this.append('(', false, true);
  }
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.TableReferences) {
    this.append(')');
  }
};
Sql.prototype.travelTableReference = function(ast) {
  if (ast.hasOj) {
    this.append('{');
    this.appendKeyword('oj');
    this.travel(ast.value);
    this.append('}');
  } else {
    this.travel(ast.value);
  }
};
Sql.prototype.travelInnerCrossJoinTable = function(ast) {
  this.travel(ast.left);
  if (ast.innerCrossOpt) {
    this.appendKeyword(ast.innerCrossOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  if (ast.condition) {
    this.travel(ast.condition);
  }
};
Sql.prototype.travelStraightJoinTable = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('straight_join');
  this.travel(ast.right);
  this.travel(ast.condition);
};
Sql.prototype.travelLeftRightJoinTable = function(ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.leftRight);
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  this.travel(ast.condition);
};
Sql.prototype.travelNaturalJoinTable = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('natural');
  if (ast.leftRight) {
    this.appendKeyword(ast.leftRight);
  }
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
};
Sql.prototype.travelOnJoinCondition = function(ast) {
  this.appendKeyword('on');
  this.travel(ast.value);
};
Sql.prototype.travelUsingJoinCondition = function(ast) {
  this.appendKeyword('using');
  this.appendKeyword('(', false, true);
  this.travel(ast.value);
  this.appendKeyword(')');
};
Sql.prototype.travelPartitions = function(ast) {
  this.appendKeyword('partition');
  this.appendKeyword('(', false, true);
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  this.appendKeyword(')');
};
Sql.prototype.travelForOptIndexHint = function(ast) {
  this.appendKeyword('for');
  this.appendKeyword(ast.value);
};
Sql.prototype.travelIndexList = function(ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
};
Sql.prototype.travelUseIndexHint = function(ast) {
  this.appendKeyword('use');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
};
Sql.prototype.travelIgnoreIndexHint = function(ast) {
  this.appendKeyword('ignore');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
};
Sql.prototype.travelForceIndexHint = function(ast) {
  this.appendKeyword('force');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
};
Sql.prototype.travelTableFactor = function(ast) {
  this.travel(ast.value);
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.alias) {
    if (ast.hasAs) {
      this.appendKeyword('as');
    }
    this.travel(ast.alias);
  }
  if (ast.indexHintOpt) {
    this.travel(ast.indexHintOpt);
  }
};
Sql.prototype.travelUnion = function(ast) {
  this.travel(ast.left);
  this.appendKeyword('UNION');
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  this.travel(ast.right);
};
Sql.prototype.travelSelectParenthesized = function(ast) {
  this.appendKeyword('(');
  this.travel(ast.value);
  this.appendKeyword(')');
};
var root = this
// AMD / RequireJS
if (typeof define !== 'undefined' && define.amd) {
    define([], function () {
        return sqlParser;
    });
}
// Node.js
else if (typeof module !== 'undefined' && module.exports) {
    module.exports = sqlParser;
}
// included directly via <script> tag
else {
    root.sqlParser = sqlParser;
}

